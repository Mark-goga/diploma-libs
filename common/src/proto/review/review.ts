// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: review/review.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { FindManyDto, FindOneDocumentDto, PaginationMeta } from "../common/common";
import { FilmRef } from "../shared/shared";

export const protobufPackage = "review";

export interface CreateReviewDto {
  filmId: string;
  description: string;
  title: string;
  rating: number;
}

export interface UpdateReviewDto {
  id: string;
  description: string;
  title: string;
  rating: number;
}

export interface FindReviewsByFilmDto {
  filmId: string;
}

export interface Reviews {
  reviews: Review[];
  pagination: PaginationMeta | undefined;
}

export interface Review {
  id: string;
  userId: string;
  filmId: string;
  title: string;
  description: string;
  rating: number;
  createdAt: string;
  updatedAt: string;
}

export interface ReviewsWithFilms {
  reviews: Review[];
  films: FilmRef[];
}

export const REVIEW_PACKAGE_NAME = "review";

export interface ReviewServiceClient {
  createReview(request: CreateReviewDto): Observable<Review>;

  findManyReviews(request: FindManyDto): Observable<Reviews>;

  findOneReview(request: FindOneDocumentDto): Observable<Review>;

  findReviewsByFilm(request: FindReviewsByFilmDto): Observable<Reviews>;

  updateReview(request: UpdateReviewDto): Observable<Review>;

  removeReview(request: FindOneDocumentDto): Observable<Review>;

  findReviewsByUser(request: FindOneDocumentDto): Observable<ReviewsWithFilms>;
}

export interface ReviewServiceController {
  createReview(request: CreateReviewDto): Promise<Review> | Observable<Review> | Review;

  findManyReviews(request: FindManyDto): Promise<Reviews> | Observable<Reviews> | Reviews;

  findOneReview(request: FindOneDocumentDto): Promise<Review> | Observable<Review> | Review;

  findReviewsByFilm(request: FindReviewsByFilmDto): Promise<Reviews> | Observable<Reviews> | Reviews;

  updateReview(request: UpdateReviewDto): Promise<Review> | Observable<Review> | Review;

  removeReview(request: FindOneDocumentDto): Promise<Review> | Observable<Review> | Review;

  findReviewsByUser(
    request: FindOneDocumentDto,
  ): Promise<ReviewsWithFilms> | Observable<ReviewsWithFilms> | ReviewsWithFilms;
}

export function ReviewServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createReview",
      "findManyReviews",
      "findOneReview",
      "findReviewsByFilm",
      "updateReview",
      "removeReview",
      "findReviewsByUser",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ReviewService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ReviewService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const REVIEW_SERVICE_NAME = "ReviewService";
