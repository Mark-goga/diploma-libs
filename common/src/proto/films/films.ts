// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: films/films.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import {
  FilterDto,
  FindOneDocumentDto,
  PaginationDto,
  PaginationMeta,
  SortingDto,
} from '../common/common';

export const protobufPackage = 'film';

export interface CreateFilmDto {
  title: string;
  description: string;
  director: string;
  releaseDate: string;
  genre: string;
  backGroundImageKey: string;
}

export interface UpdateFilmDto {
  id: string;
  title: string;
  description: string;
  director: string;
  releaseDate: string;
  genre: string;
  backGroundImageKey: string;
}

export interface FindManyDtoValidator {
  pagination: PaginationDto | undefined;
  filters: FilterDto[];
  sorting: SortingDto | undefined;
}

export interface Films {
  films: Film[];
  pagination: PaginationMeta | undefined;
}

export interface Film {
  id: string;
  title: string;
  description: string;
  director: string;
  releaseDate: string;
  genre: string[];
  estimation: number;
  backGroundImageKey: string;
  avatarImageKey: string;
  createdAt: string;
  updatedAt: string;
}

export const FILM_PACKAGE_NAME = 'film';

export interface FilmServiceClient {
  createFilm(request: CreateFilmDto): Observable<Film>;

  findAll(request: FindManyDtoValidator): Observable<Films>;

  findOne(request: FindOneDocumentDto): Observable<Film>;

  update(request: UpdateFilmDto): Observable<Film>;

  remove(request: FindOneDocumentDto): Observable<Film>;
}

export interface FilmServiceController {
  createFilm(request: CreateFilmDto): Promise<Film> | Observable<Film> | Film;

  findAll(
    request: FindManyDtoValidator,
  ): Promise<Films> | Observable<Films> | Films;

  findOne(request: FindOneDocumentDto): Promise<Film> | Observable<Film> | Film;

  update(request: UpdateFilmDto): Promise<Film> | Observable<Film> | Film;

  remove(request: FindOneDocumentDto): Promise<Film> | Observable<Film> | Film;
}

export function FilmServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'createFilm',
      'findAll',
      'findOne',
      'update',
      'remove',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('FilmService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('FilmService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const FILM_SERVICE_NAME = 'FilmService';
