// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: auth/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "../common/common";
import { User } from "../user/user";

export const protobufPackage = "auth";

export enum TokenType {
  ACCESS = 0,
  REFRESH = 1,
  UNRECOGNIZED = -1,
}

export interface LoginDto {
  email: string;
  password: string;
}

export interface RegisterDto {
  name: string;
  email: string;
  password: string;
}

export interface RemoveSessionsDto {
  ids: string[];
}

export interface AuthResponseWithUser {
  accessToken: string;
  refreshToken: string;
  user: User | undefined;
}

export interface Session {
  id: string;
  userAgent: string;
  ipAddress: string;
  accessToken: string;
}

export interface Sessions {
  sessions: Session[];
}

export interface ValidateTokenDto {
  token: string;
  type: TokenType;
}

export interface ValidateTokenResponse {
  user: User | undefined;
  session: Session | undefined;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  login(request: LoginDto): Observable<AuthResponseWithUser>;

  register(request: RegisterDto): Observable<AuthResponseWithUser>;

  refresh(request: Empty): Observable<AuthResponseWithUser>;

  logout(request: Empty): Observable<Empty>;

  getSessions(request: Empty): Observable<Sessions>;

  removeSessions(request: RemoveSessionsDto): Observable<Empty>;

  validateToken(request: ValidateTokenDto): Observable<ValidateTokenResponse>;
}

export interface AuthServiceController {
  login(request: LoginDto): Promise<AuthResponseWithUser> | Observable<AuthResponseWithUser> | AuthResponseWithUser;

  register(
    request: RegisterDto,
  ): Promise<AuthResponseWithUser> | Observable<AuthResponseWithUser> | AuthResponseWithUser;

  refresh(request: Empty): Promise<AuthResponseWithUser> | Observable<AuthResponseWithUser> | AuthResponseWithUser;

  logout(request: Empty): Promise<Empty> | Observable<Empty> | Empty;

  getSessions(request: Empty): Promise<Sessions> | Observable<Sessions> | Sessions;

  removeSessions(request: RemoveSessionsDto): Promise<Empty> | Observable<Empty> | Empty;

  validateToken(
    request: ValidateTokenDto,
  ): Promise<ValidateTokenResponse> | Observable<ValidateTokenResponse> | ValidateTokenResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "login",
      "register",
      "refresh",
      "logout",
      "getSessions",
      "removeSessions",
      "validateToken",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
